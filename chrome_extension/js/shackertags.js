// Generated by CoffeeScript 1.3.3
(function() {
  var add_tag_form, shackertags, st_root_post, st_shacker_tag,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  add_tag_form = (function() {

    function add_tag_form(parent) {
      this.close = __bind(this.close, this);

      this.store_tag = __bind(this.store_tag, this);

      this.save = __bind(this.save, this);

      this.bind_ui = __bind(this.bind_ui, this);
      this.parent = parent;
      this.node = $(window.shackertags.constants.HTML_FORM_ADD_TAG);
      this.parent.node.append(this.node);
      this.bind_ui();
    }

    add_tag_form.prototype.bind_ui = function() {
      this.button_cancel = $(this.node.find('.button_cancel'));
      this.button_add = $(this.node.find('.button_add'));
      this.input_tag = $(this.node.find('.input_tag_text'));
      this.input_link = $(this.node.find('.input_tag_link'));
      this.input_tag.keydown(function(event) {
        return event.stopPropagation();
      });
      this.input_link.keydown(function(event) {
        return event.stopPropagation();
      });
      this.button_add.click(this.save);
      this.button_cancel.click(this.close);
      this.input_link.val(this.parent.get_post_link());
      return this.input_tag.focus();
    };

    add_tag_form.prototype.save = function() {
      chrome.storage.sync.get('shackertags', this.store_tag);
      return this.close();
    };

    add_tag_form.prototype.store_tag = function(data) {
      var author_add_tag_nodes, author_id, tag, tags,
        _this = this;
      author_id = this.parent.get_author_id();
      if (data.shackertags === void 0) {
        tags = {};
      } else {
        tags = data.shackertags;
      }
      if (tags[author_id] === void 0) {
        tags[author_id] = [];
      } else if (_.any(tags[author_id], function(tag) {
        return tag.tag === _this.input_tag.val();
      })) {
        return;
      }
      tag = {
        id: window.shackertags.create_guid(),
        tag: this.input_tag.val(),
        link: this.input_link.val()
      };
      tags[author_id].push(tag);
      chrome.storage.sync.set({
        'shackertags': tags
      });
      author_add_tag_nodes = $(".add_tag." + (this.parent.get_author_id()));
      return _.each(author_add_tag_nodes, function(add_tag_node) {
        return _this.parent.add_tag_after($($(add_tag_node).prev()[0]), tag, author_id);
      });
    };

    add_tag_form.prototype.close = function() {
      this.node.remove();
      return false;
    };

    return add_tag_form;

  })();

  $(document).ready(function() {
    window.shackertags = new shackertags;
    return _.each($('div.root'), function(root_post) {
      return window.shackertags.root_posts.push(new st_root_post(root_post));
    });
  });

  shackertags = (function() {

    function shackertags() {
      this.set_constants = __bind(this.set_constants, this);

      this.create_guid = __bind(this.create_guid, this);

      this.mutated = __bind(this.mutated, this);
      this.set_constants();
      this.root_posts = [];
      this.observer = new WebKitMutationObserver(this.mutated);
      this.observer.observe($('div.threads')[0], {
        childList: true,
        subtree: true
      });
    }

    shackertags.prototype.mutated = function(mutation_records, observer) {
      var _this = this;
      return _.each(mutation_records, function(mutation_record) {
        if (mutation_record.addedNodes === void 0 || mutation_record.addedNodes.length === 0) {
          return;
        }
        return _.each(mutation_record.addedNodes, function(added_node) {
          var fullpost, node;
          node = $(added_node);
          if (node.hasClass('root')) {
            fullpost = $(node.find('.fullpost'));
            window.shackertags.root_posts.push(new st_root_post(node));
          }
          if (node.hasClass('fullpost')) {
            return window.shackertags.root_posts.push(new st_root_post(node));
          }
        });
      });
    };

    shackertags.prototype.create_guid = function() {
      var _this = this;
      return 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };

    shackertags.prototype.set_constants = function() {
      this.constants = {};
      this.constants.HTML_ADD_TAG = "<span class=\"add_tag\"></span>";
      return this.constants.HTML_FORM_ADD_TAG = "<div class=\"div_add_tag\">\n	<form class=\"form_add_tag\">\n		<fieldset>\n			<legend>Add a tag</legend>\n			<ol>\n				<li>\n					<label for=\"input_tag_text\">Tag</label>\n					<input class=\"input_tag_text\" required name=\"input_tag_text\" type=\"text\" placeholder=\"Tag\"/>\n				</li>\n				<li>\n					<label for=\"input_tag_link\">Link</label>\n					<input class=\"input_tag_link\" name=\"input_tag_link\" type=\"text\" placeholder=\"http://foo.bar/\"/>\n				</li>\n			</ol>\n		</fieldset>\n		<fieldset class=\"fieldset_actions\">\n			<legend>Actions</legend>\n			<ol>\n				<li><button class=\"button_add\">Add</button></li>\n				<li><button class=\"button_cancel\">Cancel</button></li>\n			</ol>\n		</fieldset>\n	</form>\n</div>";
    };

    return shackertags;

  })();

  st_root_post = (function() {

    function st_root_post(root_node) {
      this.add_tags = __bind(this.add_tags, this);
      this.wrapped_root_node = $(root_node);
      this.tags = [];
      this.add_tags();
    }

    st_root_post.prototype.add_tags = function() {
      var user_nodes,
        _this = this;
      user_nodes = this.wrapped_root_node.find('.user, .oneline_user');
      return _.each(user_nodes, function(user_node) {
        return _this.tags.push(new st_shacker_tag(user_node));
      });
    };

    return st_root_post;

  })();

  st_shacker_tag = (function() {

    function st_shacker_tag(user_node) {
      this.show_add_tag = __bind(this.show_add_tag, this);

      this.get_author_id = __bind(this.get_author_id, this);

      this.get_post_link = __bind(this.get_post_link, this);

      this.remove_tag = __bind(this.remove_tag, this);

      this.add_tag_after = __bind(this.add_tag_after, this);

      this.show_existing_tags = __bind(this.show_existing_tags, this);

      this.process_existing_tags = __bind(this.process_existing_tags, this);
      this.user = $(user_node);
      this.is_fullpost = this.user.hasClass('user');
      this.node = $(window.shackertags.constants.HTML_ADD_TAG);
      this.user.after(this.node);
      this.node.addClass(this.get_author_id());
      this.process_existing_tags();
      this.node.click(this.show_add_tag);
    }

    st_shacker_tag.prototype.process_existing_tags = function() {
      return chrome.storage.sync.get('shackertags', this.show_existing_tags);
    };

    st_shacker_tag.prototype.show_existing_tags = function(data) {
      var author_id, existing_tags,
        _this = this;
      if (data.shackertags === void 0) {
        return;
      }
      author_id = this.get_author_id();
      existing_tags = data.shackertags[author_id];
      if (existing_tags === void 0) {
        return;
      }
      return _.each(existing_tags, function(tag) {
        return _this.add_tag_after(_this.user, tag, author_id);
      });
    };

    st_shacker_tag.prototype.add_tag_after = function(node, tag, author_id) {
      var tag_node,
        _this = this;
      tag_node = $("<span class=\"shackertag tagid_" + tag.id + "\"><a href=\"" + tag.link + "\">" + tag.tag + "</a> <a href=\"#\" class=\"remove_shackertag\">&times;</a></span>");
      node.after(tag_node);
      return $(tag_node.find('.remove_shackertag')).click(function() {
        _this.remove_tag(author_id, tag);
        return false;
      });
    };

    st_shacker_tag.prototype.remove_tag = function(author_id, tag, tag_node) {
      var _this = this;
      $(".shackertag.tagid_" + tag.id).remove();
      return chrome.storage.sync.get('shackertags', function(data) {
        var existing_tags, tag_to_remove;
        existing_tags = data.shackertags[author_id];
        tag_to_remove = _.find(existing_tags, function(existing_tag) {
          return existing_tag.tag === tag.tag;
        });
        if (tag_to_remove === void 0) {
          return;
        }
        data.shackertags[author_id].splice(existing_tags.indexOf(tag_to_remove), 1);
        return chrome.storage.sync.set({
          'shackertags': data.shackertags
        });
      });
    };

    st_shacker_tag.prototype.get_post_link = function() {
      var fullpost, permalink, postnumber;
      if (this.is_fullpost) {
        fullpost = $(this.node.parents('.fullpost')[0]);
        postnumber = $(fullpost.find('.postnumber')[0]);
        permalink = postnumber.children('a')[0];
        return permalink['href'];
      }
      return this.user.prev()[0]['href'];
    };

    st_shacker_tag.prototype.get_author_id = function() {
      var author_class, classes, fullpost, oneline;
      if (this.is_fullpost) {
        fullpost = $(this.node.parents('.fullpost')[0]);
        classes = fullpost.attr('class').split(' ');
        author_class = _.find(classes, function(fullpost_class) {
          return fullpost_class.indexOf('fpauthor') >= 0;
        });
        return "author_" + (author_class.split('_')[1]);
      }
      oneline = $(this.node.parents('.oneline')[0]);
      classes = oneline.attr('class').split(' ');
      author_class = _.find(classes, function(oneline_class) {
        return oneline_class.indexOf('olauthor') >= 0;
      });
      return "author_" + (author_class.split('_')[1]);
    };

    st_shacker_tag.prototype.show_add_tag = function() {
      if (this.node.children('.div_add_tag').length > 0) {
        return;
      }
      return new add_tag_form(this);
    };

    return st_shacker_tag;

  })();

}).call(this);
